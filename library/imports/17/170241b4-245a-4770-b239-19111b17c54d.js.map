{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;;;;;;;AAQ7B,SAAS,KAAK,CAAE,aAAa,EAAE;;AAE3B,QAAI,CAAC,cAAc,GAAG,aAAa,CAAC;;AAEpC,QAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,aAAa,GAAG,EAAE,CAAC,CAAC;;AAE9C,QAAI,CAAC,KAAK,EAAE,CAAC;CAChB;;;;;;AAMD,KAAK,CAAC,SAAS,CAAC,KAAK,GAAG,YAAY;AAChC,QAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;AAChD,QAAI,KAAK,GAAG,CAAC,CAAC;AACd,QAAI,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;AAC/B,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE;AAC1C,aAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE;AACxC,gBAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AACtC,cAAE,KAAK,CAAC;SACX;KACJ;CACJ,CAAC;;;;;;;AAOF,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,YAAY;AAC/B,QAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC5B,QAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;AACzB,QAAI,GAAG,KAAK,CAAC,EAAE;AACX,eAAO,IAAI,CAAC;KACf;;AAED,QAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC3B,QAAI,KAAK,GAAG,AAAC,MAAM,GAAG,GAAG,GAAI,CAAC,CAAC;AAC/B,QAAI,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;;;AAG5B,QAAI,IAAI,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAC5B,WAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;AACtB,WAAO,CAAC,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;;AAEzB,WAAO,MAAM,CAAC;CACjB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCF,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "var Types = require('Types');\r\n\r\n/**\r\n * 扑克管理类，用来管理一副或多副牌\r\n * @class Decks\r\n * @constructor\r\n * @param {number} numberOfDecks - 总共几副牌\r\n */\r\nfunction Decks (numberOfDecks) {\r\n    // 总共几副牌\r\n    this._numberOfDecks = numberOfDecks;\r\n    // 还没发出去的牌\r\n    this._cardIds = new Array(numberOfDecks * 52);\r\n\r\n    this.reset();\r\n}\r\n\r\n/**\r\n * 重置所有牌\r\n * @method reset\r\n */\r\nDecks.prototype.reset = function () {\r\n    this._cardIds.length = this._numberOfDecks * 52;\r\n    var index = 0;\r\n    var fromId = Types.Card.fromId;\r\n    for (var i = 0; i < this._numberOfDecks; ++i) {\r\n        for (var cardId = 0; cardId < 52; ++cardId) {\r\n            this._cardIds[index] = fromId(cardId);\r\n            ++index;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * 随机抽一张牌，如果已经没牌了，将返回 null\r\n * @method draw\r\n * @return {Card}\r\n */\r\nDecks.prototype.draw = function () {\r\n    var cardIds = this._cardIds;\r\n    var len = cardIds.length;\r\n    if (len === 0) {\r\n        return null;\r\n    }\r\n\r\n    var random = Math.random();\r\n    var index = (random * len) | 0;\r\n    var result = cardIds[index];\r\n\r\n    // 保持数组紧凑\r\n    var last = cardIds[len - 1];\r\n    cardIds[index] = last;\r\n    cardIds.length = len - 1;\r\n\r\n    return result;\r\n};\r\n\r\n///**\r\n// * 发一张牌\r\n// * @method deal\r\n// * @return {Card}\r\n// */\r\n//Decks.prototype.deal = function () {\r\n//    this._cardIds.pop();\r\n//};\r\n\r\n///**\r\n// * 洗牌\r\n// * @method shuffle\r\n// */\r\n//Decks.prototype.shuffle = function () {\r\n//    shuffleArray(this._cardIds);\r\n//};\r\n//\r\n///**\r\n// * Randomize array element order in-place.\r\n// * Using Durstenfeld shuffle algorithm.\r\n// * http://stackoverflow.com/a/12646864\r\n// */\r\n//function shuffleArray(array) {\r\n//    for (var i = array.length - 1; i > 0; i--) {\r\n//        var j = (Math.random() * (i + 1)) | 0;\r\n//        var temp = array[i];\r\n//        array[i] = array[j];\r\n//        array[j] = temp;\r\n//    }\r\n//    return array;\r\n//}\r\n\r\nmodule.exports = Decks;\r\n"
  ]
}