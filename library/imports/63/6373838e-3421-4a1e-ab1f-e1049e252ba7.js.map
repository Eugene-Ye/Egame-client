{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "var players = require('PlayerData').players;\r\nvar Decks = require('Decks');\r\nvar Types = require('Types');\r\nvar ActorPlayingState = Types.ActorPlayingState;\r\nvar Fsm = require('game-fsm');\r\n\r\nvar Game = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        playerAnchors: {\r\n            default: [],\r\n            type: cc.Node\r\n        },\r\n        playerPrefab: cc.Prefab,\r\n        dealer: cc.Node,\r\n        inGameUI: cc.Node,\r\n        betUI: cc.Node,\r\n        assetMng: cc.Node,\r\n        audioMng: cc.Node,\r\n        turnDuration: 0,\r\n        betDuration: 0,\r\n        totalChipsNum: 0,\r\n        totalDiamondNum: 0,\r\n        numberOfDecks: {\r\n            default: 1,\r\n            type: 'Integer'\r\n        }\r\n    },\r\n\r\n    statics: {\r\n        instance: null\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        Game.instance = this;\r\n        this.inGameUI = this.inGameUI.getComponent('InGameUI');\r\n        this.assetMng = this.assetMng.getComponent('AssetMng');\r\n        this.audioMng = this.audioMng.getComponent('AudioMng');\r\n        this.betUI = this.betUI.getComponent('Bet');\r\n        this.inGameUI.init(this.betDuration);\r\n        this.betUI.init();\r\n        this.dealer = this.dealer.getComponent('Dealer');\r\n        this.dealer.init();\r\n\r\n        //\r\n        this.player = null;\r\n        this.createPlayers();\r\n\r\n        // shortcut to ui element\r\n        this.info = this.inGameUI.resultTxt;\r\n        this.totalChips = this.inGameUI.labelTotalChips;\r\n\r\n        // init logic\r\n        this.decks = new Decks(this.numberOfDecks);\r\n        this.fsm = Fsm;\r\n        this.fsm.init(this);\r\n\r\n        // start\r\n        this.updateTotalChips();\r\n\r\n        this.audioMng.playMusic();\r\n    },\r\n\r\n    addStake: function (delta) {\r\n        if (this.totalChipsNum < delta) {\r\n            console.log('not enough chips!');\r\n            this.info.enabled = true;\r\n            this.info.string = '金币不足!';\r\n            return false;\r\n        } else {\r\n            this.totalChipsNum -= delta;\r\n            this.updateTotalChips();\r\n            this.player.addStake(delta);\r\n            this.audioMng.playChips();\r\n            this.info.enabled = false;\r\n            this.info.string = '请下注';\r\n            return true;\r\n        }\r\n\r\n    },\r\n\r\n    resetStake: function() {\r\n        this.totalChipsNum += this.player.stakeNum;\r\n        this.player.resetStake();\r\n        this.updateTotalChips();\r\n    },\r\n\r\n    updateTotalChips: function() {\r\n        this.totalChips.string = this.totalChipsNum;\r\n        this.player.renderer.updateTotalStake(this.totalChipsNum);\r\n    },\r\n\r\n    createPlayers: function () {\r\n        for (var i = 0; i < 5; ++i) {\r\n            var playerNode = cc.instantiate(this.playerPrefab);\r\n            var anchor = this.playerAnchors[i];\r\n            var switchSide = (i > 2);\r\n            anchor.addChild(playerNode);\r\n            playerNode.position = cc.p(0, 0);\r\n\r\n            var playerInfoPos = cc.find('anchorPlayerInfo', anchor).getPosition();\r\n            var stakePos = cc.find('anchorStake', anchor).getPosition();\r\n            var actorRenderer = playerNode.getComponent('ActorRenderer');\r\n            actorRenderer.init(players[i], playerInfoPos, stakePos, this.turnDuration, switchSide);\r\n            if (i === 2) {\r\n                this.player = playerNode.getComponent('Player');\r\n                this.player.init();\r\n            }\r\n        }\r\n    },\r\n\r\n    // UI EVENT CALLBACKS\r\n\r\n    // 玩家要牌\r\n    hit: function () {\r\n        this.player.addCard(this.decks.draw());\r\n        if (this.player.state === ActorPlayingState.Bust) {\r\n            // if every player end\r\n            this.fsm.onPlayerActed();\r\n        }\r\n\r\n        this.audioMng.playCard();\r\n\r\n        //if (this.dealer.state === ActorPlayingState.Normal) {\r\n        //    if (this.dealer.wantHit()) {\r\n        //        this.dealer.addCard(this.decks.draw());\r\n        //    }\r\n        //    else {\r\n        //        this.dealer.stand();\r\n        //    }\r\n        //}\r\n        //\r\n        //if (this.dealer.state === ActorPlayingState.Bust) {\r\n        //    this.state = GamingState.End;\r\n        //}\r\n        this.audioMng.playButton();\r\n    },\r\n\r\n    // 玩家停牌\r\n    stand: function () {\r\n        this.player.stand();\r\n\r\n        this.audioMng.playButton();\r\n\r\n        // if every player end\r\n        this.fsm.onPlayerActed();\r\n    },\r\n\r\n    //\r\n    deal: function () {\r\n        this.fsm.toDeal();\r\n        this.audioMng.playButton();\r\n    },\r\n\r\n    //\r\n    start: function () {\r\n        this.fsm.toBet();\r\n        this.audioMng.playButton();\r\n    },\r\n\r\n    // 玩家报到\r\n    report: function () {\r\n        this.player.report();\r\n\r\n        // if every player end\r\n        this.fsm.onPlayerActed();\r\n    },\r\n\r\n    quitToMenu: function () {\r\n        cc.director.loadScene('menu');\r\n    },\r\n\r\n    // FSM CALLBACKS\r\n\r\n    onEnterDealState: function () {\r\n        this.betUI.resetTossedChips();\r\n        this.inGameUI.resetCountdown();\r\n        this.player.renderer.showStakeChips(this.player.stakeNum);\r\n        this.player.addCard(this.decks.draw());\r\n        var holdCard = this.decks.draw();\r\n        this.dealer.addHoleCard(holdCard);\r\n        this.player.addCard(this.decks.draw());\r\n        this.dealer.addCard(this.decks.draw());\r\n        this.audioMng.playCard();\r\n        this.fsm.onDealed();\r\n    },\r\n\r\n    onPlayersTurnState: function (enter) {\r\n        if (enter) {\r\n            this.inGameUI.showGameState();\r\n        }\r\n    },\r\n\r\n    onEnterDealersTurnState: function () {\r\n        while (this.dealer.state === ActorPlayingState.Normal) {\r\n            if (this.dealer.wantHit()) {\r\n                this.dealer.addCard(this.decks.draw());\r\n            }\r\n            else {\r\n                this.dealer.stand();\r\n            }\r\n        }\r\n        this.fsm.onDealerActed();\r\n    },\r\n\r\n    // 结算\r\n    onEndState: function (enter) {\r\n        if (enter) {\r\n            this.dealer.revealHoldCard();\r\n            this.inGameUI.showResultState();\r\n\r\n            var outcome = this._getPlayerResult(this.player, this.dealer);\r\n            switch (outcome) {\r\n                case Types.Outcome.Win:\r\n                    this.info.string = 'You Win';\r\n                    this.audioMng.pauseMusic();\r\n                    this.audioMng.playWin();\r\n                    // 拿回原先自己的筹码\r\n                    this.totalChipsNum += this.player.stakeNum;\r\n                    // 奖励筹码\r\n                    var winChipsNum = this.player.stakeNum;\r\n                    if (!this.player.state === Types.ActorPlayingState.Report) {\r\n                        if (this.player.hand === Types.Hand.BlackJack) {\r\n                            winChipsNum *= 1.5;\r\n                        }\r\n                        else {\r\n                            // 五小龙\r\n                            winChipsNum *= 2.0;\r\n                        }\r\n                    }\r\n                    this.totalChipsNum += winChipsNum;\r\n                    this.updateTotalChips();\r\n                    break;\r\n\r\n                case Types.Outcome.Lose:\r\n                    this.info.string = 'You Lose';\r\n                    this.audioMng.pauseMusic();\r\n                    this.audioMng.playLose();\r\n                    break;\r\n\r\n                case Types.Outcome.Tie:\r\n                    this.info.string = 'Draw';\r\n                    // 退还筹码\r\n                    this.totalChipsNum += this.player.stakeNum;\r\n                    this.updateTotalChips();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.info.enabled = enter;\r\n    },\r\n\r\n    // 下注\r\n    onBetState: function  (enter) {\r\n        if (enter) {\r\n           this.decks.reset();\r\n           this.player.reset();\r\n           this.dealer.reset();\r\n           this.info.string = '请下注';\r\n           this.inGameUI.showBetState();\r\n           this.inGameUI.startCountdown();\r\n\r\n           this.audioMng.resumeMusic();\r\n        }\r\n        this.info.enabled = enter;\r\n    },\r\n\r\n    // PRIVATES\r\n\r\n    // 判断玩家输赢\r\n    _getPlayerResult: function (player, dealer) {\r\n        var Outcome = Types.Outcome;\r\n        if (player.state === ActorPlayingState.Bust) {\r\n            return Outcome.Lose;\r\n        }\r\n        else if (dealer.state === ActorPlayingState.Bust) {\r\n            return Outcome.Win;\r\n        }\r\n        else {\r\n            if (player.state === ActorPlayingState.Report) {\r\n                return Outcome.Win;\r\n            }\r\n            else {\r\n                if (player.hand > dealer.hand) {\r\n                    return Outcome.Win;\r\n                }\r\n                else if (player.hand < dealer.hand) {\r\n                    return Outcome.Lose;\r\n                }\r\n                else {\r\n                    if (player.bestPoint === dealer.bestPoint) {\r\n                        return Outcome.Tie;\r\n                    }\r\n                    else if (player.bestPoint < dealer.bestPoint) {\r\n                        return Outcome.Lose;\r\n                    }\r\n                    else {\r\n                        return Outcome.Win;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n});\r\n"
  ]
}