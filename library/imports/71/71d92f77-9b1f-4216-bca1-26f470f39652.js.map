{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * Behavior encapsulates multiple Action callbacks that can be invoked by a single call.\r\n     * @class Behavior\r\n     */\r\n    var Behavior = (function () {\r\n        /**\r\n         * Creates a new instance of the Behavior class.\r\n         * @param {Behavior} behavior The copy constructor; omit this optional parameter for a simple constructor.\r\n         */\r\n        function Behavior(behavior) {\r\n            this.actions = [];\r\n            if (behavior) {\r\n                this.push(behavior); // NOTE: this ensures a copy of the array is made\r\n            }\r\n        }\r\n        /**\r\n         * Adds an Action or set of Actions callbacks in a Behavior instance to this behavior instance.\r\n         * @method push\r\n         * @param {Behavior} behavior The Action or set of Actions callbacks to add to this behavior instance.\r\n         * @returns {Behavior} Returns this behavior instance (for use in fluent style development).\r\n         */\r\n        Behavior.prototype.push = function (behavior) {\r\n            Array.prototype.push.apply(this.actions, behavior instanceof Behavior ? behavior.actions : arguments);\r\n            return this;\r\n        };\r\n        /**\r\n         * Tests the Behavior instance to see if any actions have been defined.\r\n         * @method hasActions\r\n         * @returns {boolean} True if there are actions defined within this Behavior instance.\r\n         */\r\n        Behavior.prototype.hasActions = function () {\r\n            return this.actions.length !== 0;\r\n        };\r\n        /**\r\n         * Invokes all the action callbacks in this Behavior instance.\r\n         * @method invoke\r\n         * @param {any} message The message that triggered the transition.\r\n         * @param {IActiveStateConfiguration} instance The state machine instance.\r\n         * @param {boolean} history Internal use only\r\n         */\r\n        Behavior.prototype.invoke = function (message, instance, history) {\r\n            if (history === void 0) { history = false; }\r\n            this.actions.forEach(function (action) { return action(message, instance, history); });\r\n        };\r\n        return Behavior;\r\n    })();\r\n    StateJS.Behavior = Behavior;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * An enumeration of static constants that dictates the precise behaviour of pseudo states.\r\n     *\r\n     * Use these constants as the `kind` parameter when creating new `PseudoState` instances.\r\n     * @class PseudoStateKind\r\n     */\r\n    (function (PseudoStateKind) {\r\n        /**\r\n         * Used for pseudo states that are always the staring point when entering their parent region.\r\n         * @member {PseudoStateKind} Initial\r\n         */\r\n        PseudoStateKind[PseudoStateKind[\"Initial\"] = 0] = \"Initial\";\r\n        /**\r\n         * Used for pseudo states that are the the starting point when entering their parent region for the first time; subsequent entries will start at the last known state.\r\n         * @member {PseudoStateKind} ShallowHistory\r\n         */\r\n        PseudoStateKind[PseudoStateKind[\"ShallowHistory\"] = 1] = \"ShallowHistory\";\r\n        /**\r\n         * As per `ShallowHistory` but the history semantic cascades through all child regions irrespective of their initial pseudo state kind.\r\n         * @member {PseudoStateKind} DeepHistory\r\n         */\r\n        PseudoStateKind[PseudoStateKind[\"DeepHistory\"] = 2] = \"DeepHistory\";\r\n        /**\r\n         * Enables a dynamic conditional branches; within a compound transition.\r\n         * All outbound transition guards from a Choice are evaluated upon entering the PseudoState:\r\n         * if a single transition is found, it will be traversed;\r\n         * if many transitions are found, an arbitary one will be selected and traversed;\r\n         * if none evaluate true, and there is no 'else transition' defined, the machine is deemed illformed and an exception will be thrown.\r\n         * @member {PseudoStateKind} Choice\r\n         */\r\n        PseudoStateKind[PseudoStateKind[\"Choice\"] = 3] = \"Choice\";\r\n        /**\r\n         * Enables a static conditional branches; within a compound transition.\r\n         * All outbound transition guards from a Choice are evaluated upon entering the PseudoState:\r\n         * if a single transition is found, it will be traversed;\r\n         * if many or none evaluate true, and there is no 'else transition' defined, the machine is deemed illformed and an exception will be thrown.\r\n         * @member {PseudoStateKind} Junction\r\n         */\r\n        PseudoStateKind[PseudoStateKind[\"Junction\"] = 4] = \"Junction\";\r\n        /**\r\n         * Entering a terminate `PseudoState` implies that the execution of this state machine by means of its state object is terminated.\r\n         * @member {PseudoStateKind} Terminate\r\n         */\r\n        PseudoStateKind[PseudoStateKind[\"Terminate\"] = 5] = \"Terminate\";\r\n    })(StateJS.PseudoStateKind || (StateJS.PseudoStateKind = {}));\r\n    var PseudoStateKind = StateJS.PseudoStateKind;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * An enumeration of static constants that dictates the precise behaviour of transitions.\r\n     *\r\n     * Use these constants as the `kind` parameter when creating new `Transition` instances.\r\n     * @class TransitionKind\r\n     */\r\n    (function (TransitionKind) {\r\n        /**\r\n         * The transition, if triggered, occurs without exiting or entering the source state.\r\n         * Thus, it does not cause a state change. This means that the entry or exit condition of the source state will not be invoked.\r\n         * An internal transition can be taken even if the state machine is in one or more regions nested within this state.\r\n         * @member {TransitionKind} Internal\r\n         */\r\n        TransitionKind[TransitionKind[\"Internal\"] = 0] = \"Internal\";\r\n        /**\r\n         * The transition, if triggered, will not exit the composite (source) state, but will enter the non-active target vertex ancestry.\r\n         * @member {TransitionKind} Local\r\n         */\r\n        TransitionKind[TransitionKind[\"Local\"] = 1] = \"Local\";\r\n        /**\r\n         * The transition, if triggered, will exit the source vertex.\r\n         * @member {TransitionKind} External\r\n         */\r\n        TransitionKind[TransitionKind[\"External\"] = 2] = \"External\";\r\n    })(StateJS.TransitionKind || (StateJS.TransitionKind = {}));\r\n    var TransitionKind = StateJS.TransitionKind;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * An abstract class used as the base for the Region and Vertex classes.\r\n     * An element is a node within the tree structure that represents a composite state machine model.\r\n     * @class Element\r\n     */\r\n    var Element = (function () {\r\n        /**\r\n         * Creates a new instance of the element class.\r\n         * @param {string} name The name of the element.\r\n         */\r\n        function Element(name, parent) {\r\n            this.name = name;\r\n            this.qualifiedName = parent ? (parent.qualifiedName + Element.namespaceSeparator + name) : name;\r\n        }\r\n        /**\r\n         * Returns a the element name as a fully qualified namespace.\r\n         * @method toString\r\n         * @returns {string}\r\n         */\r\n        Element.prototype.toString = function () {\r\n            return this.qualifiedName;\r\n        };\r\n        /**\r\n         * The symbol used to separate element names within a fully qualified name.\r\n         * Change this static member to create different styles of qualified name generated by the toString method.\r\n         * @member {string}\r\n         */\r\n        Element.namespaceSeparator = \".\";\r\n        return Element;\r\n    })();\r\n    StateJS.Element = Element;\r\n})(StateJS || (StateJS = {}));\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * An element within a state machine model that is a container of Vertices.\r\n     *\r\n     * Regions are implicitly inserted into composite state machines as a container for vertices.\r\n     * They only need to be explicitly defined if orthogonal states are required.\r\n     *\r\n     * Region extends the Element class and inherits its public interface.\r\n     * @class Region\r\n     * @augments Element\r\n     */\r\n    var Region = (function (_super) {\r\n        __extends(Region, _super);\r\n        /**\r\n         * Creates a new instance of the Region class.\r\n         * @param {string} name The name of the region.\r\n         * @param {State} state The parent state that this region will be a child of.\r\n         */\r\n        function Region(name, state) {\r\n            _super.call(this, name, state);\r\n            /**\r\n             * The set of vertices that are children of the region.\r\n             * @member {Array<Vertex>}\r\n             */\r\n            this.vertices = [];\r\n            this.state = state;\r\n            this.state.regions.push(this);\r\n            this.state.getRoot().clean = false;\r\n        }\r\n        /**\r\n         * Returns the root element within the state machine model.\r\n         * @method getRoot\r\n         * @returns {StateMachine} The root state machine element.\r\n         */\r\n        Region.prototype.getRoot = function () {\r\n            return this.state.getRoot();\r\n        };\r\n        /**\r\n         * Accepts an instance of a visitor and calls the visitRegion method on it.\r\n         * @method accept\r\n         * @param {Visitor<TArg1>} visitor The visitor instance.\r\n         * @param {TArg1} arg1 An optional argument to pass into the visitor.\r\n         * @param {any} arg2 An optional argument to pass into the visitor.\r\n         * @param {any} arg3 An optional argument to pass into the visitor.\r\n         * @returns {any} Any value can be returned by the visitor.\r\n         */\r\n        Region.prototype.accept = function (visitor, arg1, arg2, arg3) {\r\n            return visitor.visitRegion(this, arg1, arg2, arg3);\r\n        };\r\n        /**\r\n         * The name given to regions that are are created automatically when a state is passed as a vertex's parent.\r\n         * Regions are automatically inserted into state machine models as the composite structure is built; they are named using this static member.\r\n         * Update this static member to use a different name for default regions.\r\n         * @member {string}\r\n         */\r\n        Region.defaultName = \"default\";\r\n        return Region;\r\n    })(StateJS.Element);\r\n    StateJS.Region = Region;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * An abstract element within a state machine model that can be the source or target of a transition (states and pseudo states).\r\n     *\r\n     * Vertex extends the Element class and inherits its public interface.\r\n     * @class Vertex\r\n     * @augments Element\r\n     */\r\n    var Vertex = (function (_super) {\r\n        __extends(Vertex, _super);\r\n        /**\r\n         * Creates a new instance of the Vertex class.\r\n         * @param {string} name The name of the vertex.\r\n         * @param {Element} parent The parent region or state.\r\n         */\r\n        function Vertex(name, parent) {\r\n            _super.call(this, name, parent = (parent instanceof StateJS.State ? parent.defaultRegion() : parent)); // TODO: find a cleaner way to manage implicit conversion\r\n            /**\r\n             * The set of transitions from this vertex.\r\n             * @member {Array<Transition>}\r\n             */\r\n            this.outgoing = [];\r\n            this.region = parent; // NOTE: parent will be a Region due to the conditional logic in the super call above\r\n            if (this.region) {\r\n                this.region.vertices.push(this);\r\n                this.region.getRoot().clean = false;\r\n            }\r\n        }\r\n        /**\r\n         * Returns the root element within the state machine model.\r\n         * @method getRoot\r\n         * @returns {StateMachine} The root state machine element.\r\n         */\r\n        Vertex.prototype.getRoot = function () {\r\n            return this.region.getRoot(); // NOTE: need to keep this dynamic as a state machine may be embedded within another\r\n        };\r\n        /**\r\n         * Creates a new transition from this vertex.\r\n         * Newly created transitions are completion transitions; they will be evaluated after a vertex has been entered if it is deemed to be complete.\r\n         * Transitions can be converted to be event triggered by adding a guard condition via the transitions `where` method.\r\n         * @method to\r\n         * @param {Vertex} target The destination of the transition; omit for internal transitions.\r\n         * @param {TransitionKind} kind The kind the transition; use this to set Local or External (the default if omitted) transition semantics.\r\n         * @returns {Transition} The new transition object.\r\n         */\r\n        Vertex.prototype.to = function (target, kind) {\r\n            if (kind === void 0) { kind = StateJS.TransitionKind.External; }\r\n            return new StateJS.Transition(this, target, kind);\r\n        };\r\n        /**\r\n         * Accepts an instance of a visitor.\r\n         * @method accept\r\n         * @param {Visitor<TArg>} visitor The visitor instance.\r\n         * @param {TArg} arg An optional argument to pass into the visitor.\r\n         * @returns {any} Any value can be returned by the visitor.\r\n         */\r\n        Vertex.prototype.accept = function (visitor, arg1, arg2, arg3) { };\r\n        return Vertex;\r\n    })(StateJS.Element);\r\n    StateJS.Vertex = Vertex;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * An element within a state machine model that represents an transitory Vertex within the state machine model.\r\n     *\r\n     * Pseudo states are required in all state machine models; at the very least, an `Initial` pseudo state is the default stating state when the parent region is entered.\r\n     * Other types of pseudo state are available; typically for defining history semantics or to facilitate more complex transitions.\r\n     * A `Terminate` pseudo state kind is also available to immediately terminate processing within the entire state machine instance.\r\n     *\r\n     * PseudoState extends the Vertex class and inherits its public interface.\r\n     * @class PseudoState\r\n     * @augments Vertex\r\n     */\r\n    var PseudoState = (function (_super) {\r\n        __extends(PseudoState, _super);\r\n        /**\r\n         * Creates a new instance of the PseudoState class.\r\n         * @param {string} name The name of the pseudo state.\r\n         * @param {Element} parent The parent element that this pseudo state will be a child of.\r\n         * @param {PseudoStateKind} kind Determines the behaviour of the PseudoState.\r\n         */\r\n        function PseudoState(name, parent, kind) {\r\n            if (kind === void 0) { kind = StateJS.PseudoStateKind.Initial; }\r\n            _super.call(this, name, parent);\r\n            this.kind = kind;\r\n        }\r\n        /**\r\n         * Tests a pseudo state to determine if it is a history pseudo state.\r\n         * History pseudo states are of kind: Initial, ShallowHisory, or DeepHistory.\r\n         * @method isHistory\r\n         * @returns {boolean} True if the pseudo state is a history pseudo state.\r\n         */\r\n        PseudoState.prototype.isHistory = function () {\r\n            return this.kind === StateJS.PseudoStateKind.DeepHistory || this.kind === StateJS.PseudoStateKind.ShallowHistory;\r\n        };\r\n        /**\r\n         * Tests a pseudo state to determine if it is an initial pseudo state.\r\n         * Initial pseudo states are of kind: Initial, ShallowHisory, or DeepHistory.\r\n         * @method isInitial\r\n         * @returns {boolean} True if the pseudo state is an initial pseudo state.\r\n         */\r\n        PseudoState.prototype.isInitial = function () {\r\n            return this.kind === StateJS.PseudoStateKind.Initial || this.isHistory();\r\n        };\r\n        /**\r\n         * Accepts an instance of a visitor and calls the visitPseudoState method on it.\r\n         * @method accept\r\n         * @param {Visitor<TArg1>} visitor The visitor instance.\r\n         * @param {TArg1} arg1 An optional argument to pass into the visitor.\r\n         * @param {any} arg2 An optional argument to pass into the visitor.\r\n         * @param {any} arg3 An optional argument to pass into the visitor.\r\n         * @returns {any} Any value can be returned by the visitor.\r\n         */\r\n        PseudoState.prototype.accept = function (visitor, arg1, arg2, arg3) {\r\n            return visitor.visitPseudoState(this, arg1, arg2, arg3);\r\n        };\r\n        return PseudoState;\r\n    })(StateJS.Vertex);\r\n    StateJS.PseudoState = PseudoState;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * An element within a state machine model that represents an invariant condition within the life of the state machine instance.\r\n     *\r\n     * States are one of the fundamental building blocks of the state machine model.\r\n     * Behaviour can be defined for both state entry and state exit.\r\n     *\r\n     * State extends the Vertex class and inherits its public interface.\r\n     * @class State\r\n     * @augments Vertex\r\n     */\r\n    var State = (function (_super) {\r\n        __extends(State, _super);\r\n        /**\r\n         * Creates a new instance of the State class.\r\n         * @param {string} name The name of the state.\r\n         * @param {Element} parent The parent state that owns the state.\r\n         */\r\n        function State(name, parent) {\r\n            _super.call(this, name, parent);\r\n            // user defined behaviour (via exit method) to execute when exiting a state.\r\n            this.exitBehavior = new StateJS.Behavior();\r\n            // user defined behaviour (via entry method) to execute when entering a state.\r\n            this.entryBehavior = new StateJS.Behavior();\r\n            /**\r\n             * The set of regions under this state.\r\n             * @member {Array<Region>}\r\n             */\r\n            this.regions = [];\r\n        }\r\n        /**\r\n         * Returns the default region for the state.\r\n         * Note, this will create the default region if it does not already exist.\r\n         * @method defaultRegion\r\n         * @returns {Region} The default region.\r\n         */\r\n        State.prototype.defaultRegion = function () {\r\n            return this.regions.reduce(function (result, region) { return region.name === StateJS.Region.defaultName ? region : result; }, undefined) || new StateJS.Region(StateJS.Region.defaultName, this);\r\n        };\r\n        /**\r\n         * Tests the state to see if it is a final state;\r\n         * a final state is one that has no outbound transitions.\r\n         * @method isFinal\r\n         * @returns {boolean} True if the state is a final state.\r\n         */\r\n        State.prototype.isFinal = function () {\r\n            return this.outgoing.length === 0;\r\n        };\r\n        /**\r\n         * Tests the state to see if it is a simple state;\r\n         * a simple state is one that has no child regions.\r\n         * @method isSimple\r\n         * @returns {boolean} True if the state is a simple state.\r\n         */\r\n        State.prototype.isSimple = function () {\r\n            return this.regions.length === 0;\r\n        };\r\n        /**\r\n         * Tests the state to see if it is a composite state;\r\n         * a composite state is one that has one or more child regions.\r\n         * @method isComposite\r\n         * @returns {boolean} True if the state is a composite state.\r\n         */\r\n        State.prototype.isComposite = function () {\r\n            return this.regions.length > 0;\r\n        };\r\n        /**\r\n         * Tests the state to see if it is an orthogonal state;\r\n         * an orthogonal state is one that has two or more child regions.\r\n         * @method isOrthogonal\r\n         * @returns {boolean} True if the state is an orthogonal state.\r\n         */\r\n        State.prototype.isOrthogonal = function () {\r\n            return this.regions.length > 1;\r\n        };\r\n        /**\r\n         * Adds behaviour to a state that is executed each time the state is exited.\r\n         * @method exit\r\n         * @param {Action} exitAction The action to add to the state's exit behaviour.\r\n         * @returns {State} Returns the state to allow a fluent style API.\r\n         */\r\n        State.prototype.exit = function (exitAction) {\r\n            this.exitBehavior.push(exitAction);\r\n            this.getRoot().clean = false;\r\n            return this;\r\n        };\r\n        /**\r\n         * Adds behaviour to a state that is executed each time the state is entered.\r\n         * @method entry\r\n         * @param {Action} entryAction The action to add to the state's entry behaviour.\r\n         * @returns {State} Returns the state to allow a fluent style API.\r\n         */\r\n        State.prototype.entry = function (entryAction) {\r\n            this.entryBehavior.push(entryAction);\r\n            this.getRoot().clean = false;\r\n            return this;\r\n        };\r\n        /**\r\n         * Accepts an instance of a visitor and calls the visitState method on it.\r\n         * @method accept\r\n         * @param {Visitor<TArg1>} visitor The visitor instance.\r\n         * @param {TArg1} arg1 An optional argument to pass into the visitor.\r\n         * @param {any} arg2 An optional argument to pass into the visitor.\r\n         * @param {any} arg3 An optional argument to pass into the visitor.\r\n         * @returns {any} Any value can be returned by the visitor.\r\n         */\r\n        State.prototype.accept = function (visitor, arg1, arg2, arg3) {\r\n            return visitor.visitState(this, arg1, arg2, arg3);\r\n        };\r\n        return State;\r\n    })(StateJS.Vertex);\r\n    StateJS.State = State;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * An element within a state machine model that represents completion of the life of the containing Region within the state machine instance.\r\n     *\r\n     * A final state cannot have outbound transitions.\r\n     *\r\n     * FinalState extends the State class and inherits its public interface.\r\n     * @class FinalState\r\n     * @augments State\r\n     */\r\n    var FinalState = (function (_super) {\r\n        __extends(FinalState, _super);\r\n        /**\r\n         * Creates a new instance of the FinalState class.\r\n         * @param {string} name The name of the final state.\r\n         * @param {Element} parent The parent element that owns the final state.\r\n         */\r\n        function FinalState(name, parent) {\r\n            _super.call(this, name, parent);\r\n        }\r\n        /**\r\n         * Accepts an instance of a visitor and calls the visitFinalState method on it.\r\n         * @method accept\r\n         * @param {Visitor<TArg>} visitor The visitor instance.\r\n         * @param {TArg} arg An optional argument to pass into the visitor.\r\n         * @returns {any} Any value can be returned by the visitor.\r\n         */\r\n        FinalState.prototype.accept = function (visitor, arg1, arg2, arg3) {\r\n            return visitor.visitFinalState(this, arg1, arg2, arg3);\r\n        };\r\n        return FinalState;\r\n    })(StateJS.State);\r\n    StateJS.FinalState = FinalState;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * An element within a state machine model that represents the root of the state machine model.\r\n     *\r\n     * StateMachine extends the State class and inherits its public interface.\r\n     * @class StateMachine\r\n     * @augments State\r\n     */\r\n    var StateMachine = (function (_super) {\r\n        __extends(StateMachine, _super);\r\n        /**\r\n         * Creates a new instance of the StateMachine class.\r\n         * @param {string} name The name of the state machine.\r\n         */\r\n        function StateMachine(name) {\r\n            _super.call(this, name, undefined);\r\n            // flag used to indicate that the state machine model has has structural changes and therefore requires initialising.\r\n            this.clean = false;\r\n        }\r\n        /**\r\n         * Returns the root element within the state machine model.\r\n         * Note that if this state machine is embeded within another state machine, the ultimate root element will be returned.\r\n         * @method getRoot\r\n         * @returns {StateMachine} The root state machine element.\r\n         */\r\n        StateMachine.prototype.getRoot = function () {\r\n            return this.region ? this.region.getRoot() : this;\r\n        };\r\n        /**\r\n         * Accepts an instance of a visitor and calls the visitStateMachine method on it.\r\n         * @method accept\r\n         * @param {Visitor<TArg1>} visitor The visitor instance.\r\n         * @param {TArg1} arg1 An optional argument to pass into the visitor.\r\n         * @param {any} arg2 An optional argument to pass into the visitor.\r\n         * @param {any} arg3 An optional argument to pass into the visitor.\r\n         * @returns {any} Any value can be returned by the visitor.\r\n         */\r\n        StateMachine.prototype.accept = function (visitor, arg1, arg2, arg3) {\r\n            return visitor.visitStateMachine(this, arg1, arg2, arg3);\r\n        };\r\n        return StateMachine;\r\n    })(StateJS.State);\r\n    StateJS.StateMachine = StateMachine;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * A transition between vertices (states or pseudo states) that may be traversed in response to a message.\r\n     *\r\n     * Transitions come in a variety of types:\r\n     * internal transitions respond to messages but do not cause a state transition, they only have behaviour;\r\n     * local transitions are contained within a single region therefore the source vertex is exited, the transition traversed, and the target state entered;\r\n     * external transitions are more complex in nature as they cross region boundaries, all elements up to but not not including the common ancestor are exited and entered.\r\n     *\r\n     * Entering a composite state will cause the entry of the child regions within the composite state; this in turn may trigger more transitions.\r\n     * @class Transition\r\n     */\r\n    var Transition = (function () {\r\n        /**\r\n         * Creates a new instance of the Transition class.\r\n         * @param {Vertex} source The source of the transition.\r\n         * @param {Vertex} source The target of the transition; this is an optional parameter, omitting it will create an Internal transition.\r\n         * @param {TransitionKind} kind The kind the transition; use this to set Local or External (the default if omitted) transition semantics.\r\n         */\r\n        function Transition(source, target, kind) {\r\n            var _this = this;\r\n            if (kind === void 0) { kind = StateJS.TransitionKind.External; }\r\n            // user defined behaviour (via effect) executed when traversing this transition.\r\n            this.transitionBehavior = new StateJS.Behavior();\r\n            // the collected actions to perform when traversing the transition (includes exiting states, traversal, and state entry)\r\n            this.onTraverse = new StateJS.Behavior();\r\n            this.source = source;\r\n            this.target = target;\r\n            this.kind = target ? kind : StateJS.TransitionKind.Internal;\r\n            this.guard = source instanceof StateJS.PseudoState ? Transition.TrueGuard : (function (message) { return message === _this.source; });\r\n            this.source.outgoing.push(this);\r\n            this.source.getRoot().clean = false;\r\n        }\r\n        /**\r\n         * Turns a transition into an else transition.\r\n         *\r\n         * Else transitions can be used at `Junction` or `Choice` pseudo states if no other transition guards evaluate true, an Else transition if present will be traversed.\r\n         * @method else\r\n         * @returns {Transition} Returns the transition object to enable the fluent API.\r\n         */\r\n        Transition.prototype.else = function () {\r\n            this.guard = Transition.FalseGuard;\r\n            return this;\r\n        };\r\n        /**\r\n         * Defines the guard condition for the transition.\r\n         * @method when\r\n         * @param {Guard} guard The guard condition that must evaluate true for the transition to be traversed.\r\n         * @returns {Transition} Returns the transition object to enable the fluent API.\r\n         */\r\n        Transition.prototype.when = function (guard) {\r\n            this.guard = guard;\r\n            return this;\r\n        };\r\n        /**\r\n         * Add behaviour to a transition.\r\n         * @method effect\r\n         * @param {Action} transitionAction The action to add to the transitions traversal behaviour.\r\n         * @returns {Transition} Returns the transition object to enable the fluent API.\r\n         */\r\n        Transition.prototype.effect = function (transitionAction) {\r\n            this.transitionBehavior.push(transitionAction);\r\n            this.source.getRoot().clean = false;\r\n            return this;\r\n        };\r\n        /**\r\n         * Accepts an instance of a visitor and calls the visitTransition method on it.\r\n         * @method accept\r\n         * @param {Visitor<TArg1>} visitor The visitor instance.\r\n         * @param {TArg1} arg1 An optional argument to pass into the visitor.\r\n         * @param {any} arg2 An optional argument to pass into the visitor.\r\n         * @param {any} arg3 An optional argument to pass into the visitor.\r\n         * @returns {any} Any value can be returned by the visitor.\r\n         */\r\n        Transition.prototype.accept = function (visitor, arg1, arg2, arg3) {\r\n            return visitor.visitTransition(this, arg1, arg2, arg3);\r\n        };\r\n        /**\r\n         * Returns a the transition name.\r\n         * @method toString\r\n         * @returns {string}\r\n         */\r\n        Transition.prototype.toString = function () {\r\n            return \"[\" + (this.target ? (this.source + \" -> \" + this.target) : this.source) + \"]\";\r\n        };\r\n        // the default guard condition for pseudo states\r\n        Transition.TrueGuard = function () { return true; };\r\n        // used as the guard condition for else tranitions\r\n        Transition.FalseGuard = function () { return false; };\r\n        return Transition;\r\n    })();\r\n    StateJS.Transition = Transition;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * Implementation of a visitor pattern.\r\n     * @class Visitor\r\n     */\r\n    var Visitor = (function () {\r\n        function Visitor() {\r\n        }\r\n        /**\r\n         * Visits an element within a state machine model.\r\n         * @method visitElement\r\n         * @param {Element} element the element being visited.\r\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\r\n         * @param {any} arg2 An optional parameter passed into the accept method.\r\n         * @param {any} arg3 An optional parameter passed into the accept method.\r\n         * @returns {any} Any value may be returned when visiting an element.\r\n         */\r\n        Visitor.prototype.visitElement = function (element, arg1, arg2, arg3) {\r\n        };\r\n        /**\r\n         * Visits a region within a state machine model.\r\n         * @method visitRegion\r\n         * @param {Region} region The region being visited.\r\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\r\n         * @param {any} arg2 An optional parameter passed into the accept method.\r\n         * @param {any} arg3 An optional parameter passed into the accept method.\r\n         * @returns {any} Any value may be returned when visiting an element.\r\n         */\r\n        Visitor.prototype.visitRegion = function (region, arg1, arg2, arg3) {\r\n            var _this = this;\r\n            var result = this.visitElement(region, arg1, arg2, arg3);\r\n            region.vertices.forEach(function (vertex) { vertex.accept(_this, arg1, arg2, arg3); });\r\n            return result;\r\n        };\r\n        /**\r\n         * Visits a vertex within a state machine model.\r\n         * @method visitVertex\r\n         * @param {Vertex} vertex The vertex being visited.\r\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\r\n         * @param {any} arg2 An optional parameter passed into the accept method.\r\n         * @param {any} arg3 An optional parameter passed into the accept method.\r\n         * @returns {any} Any value may be returned when visiting an element.\r\n         */\r\n        Visitor.prototype.visitVertex = function (vertex, arg1, arg2, arg3) {\r\n            var _this = this;\r\n            var result = this.visitElement(vertex, arg1, arg2, arg3);\r\n            vertex.outgoing.forEach(function (transition) { transition.accept(_this, arg1, arg2, arg3); });\r\n            return result;\r\n        };\r\n        /**\r\n         * Visits a pseudo state within a state machine model.\r\n         * @method visitPseudoState\r\n         * @param {PseudoState} pseudoState The pseudo state being visited.\r\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\r\n         * @param {any} arg2 An optional parameter passed into the accept method.\r\n         * @param {any} arg3 An optional parameter passed into the accept method.\r\n         * @returns {any} Any value may be returned when visiting an element.\r\n         */\r\n        Visitor.prototype.visitPseudoState = function (pseudoState, arg1, arg2, arg3) {\r\n            return this.visitVertex(pseudoState, arg1, arg2, arg3);\r\n        };\r\n        /**\r\n         * Visits a state within a state machine model.\r\n         * @method visitState\r\n         * @param {State} state The state being visited.\r\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\r\n         * @param {any} arg2 An optional parameter passed into the accept method.\r\n         * @param {any} arg3 An optional parameter passed into the accept method.\r\n         * @returns {any} Any value may be returned when visiting an element.\r\n         */\r\n        Visitor.prototype.visitState = function (state, arg1, arg2, arg3) {\r\n            var _this = this;\r\n            var result = this.visitVertex(state, arg1, arg2, arg3);\r\n            state.regions.forEach(function (region) { region.accept(_this, arg1, arg2, arg3); });\r\n            return result;\r\n        };\r\n        /**\r\n         * Visits a final state within a state machine model.\r\n         * @method visitFinal\r\n         * @param {FinalState} finalState The final state being visited.\r\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\r\n         * @param {any} arg2 An optional parameter passed into the accept method.\r\n         * @param {any} arg3 An optional parameter passed into the accept method.\r\n         * @returns {any} Any value may be returned when visiting an element.\r\n         */\r\n        Visitor.prototype.visitFinalState = function (finalState, arg1, arg2, arg3) {\r\n            return this.visitState(finalState, arg1, arg2, arg3);\r\n        };\r\n        /**\r\n         * Visits a state machine within a state machine model.\r\n         * @method visitVertex\r\n         * @param {StateMachine} state machine The state machine being visited.\r\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\r\n         * @param {any} arg2 An optional parameter passed into the accept method.\r\n         * @param {any} arg3 An optional parameter passed into the accept method.\r\n         * @returns {any} Any value may be returned when visiting an element.\r\n         */\r\n        Visitor.prototype.visitStateMachine = function (stateMachine, arg1, arg2, arg3) {\r\n            return this.visitState(stateMachine, arg1, arg2, arg3);\r\n        };\r\n        /**\r\n         * Visits a transition within a state machine model.\r\n         * @method visitTransition\r\n         * @param {Transition} transition The transition being visited.\r\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\r\n         * @param {any} arg2 An optional parameter passed into the accept method.\r\n         * @param {any} arg3 An optional parameter passed into the accept method.\r\n         * @returns {any} Any value may be returned when visiting an element.\r\n         */\r\n        Visitor.prototype.visitTransition = function (transition, arg1, arg2, arg3) {\r\n        };\r\n        return Visitor;\r\n    })();\r\n    StateJS.Visitor = Visitor;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * Default working implementation of a state machine instance class.\r\n     *\r\n     * Implements the `IActiveStateConfiguration` interface.\r\n     * It is possible to create other custom instance classes to manage state machine state in other ways (e.g. as serialisable JSON); just implement the same members and methods as this class.\r\n     * @class StateMachineInstance\r\n     * @implements IActiveStateConfiguration\r\n     */\r\n    var StateMachineInstance = (function () {\r\n        /**\r\n         * Creates a new instance of the state machine instance class.\r\n         * @param {string} name The optional name of the state machine instance.\r\n         */\r\n        function StateMachineInstance(name) {\r\n            if (name === void 0) { name = \"unnamed\"; }\r\n            this.last = {};\r\n            /**\r\n             * Indicates that the state manchine instance reached was terminated by reaching a Terminate pseudo state.\r\n             * @member isTerminated\r\n             */\r\n            this.isTerminated = false;\r\n            this.name = name;\r\n        }\r\n        // Updates the last known state for a given region.\r\n        StateMachineInstance.prototype.setCurrent = function (region, state) {\r\n            this.last[region.qualifiedName] = state;\r\n        };\r\n        // Returns the last known state for a given region.\r\n        StateMachineInstance.prototype.getCurrent = function (region) {\r\n            return this.last[region.qualifiedName];\r\n        };\r\n        /**\r\n         * Returns the name of the state machine instance.\r\n         * @method toString\r\n         * @returns {string} The name of the state machine instance.\r\n         */\r\n        StateMachineInstance.prototype.toString = function () {\r\n            return this.name;\r\n        };\r\n        return StateMachineInstance;\r\n    })();\r\n    StateJS.StateMachineInstance = StateMachineInstance;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * Sets a method to select an integer random number less than the max value passed as a parameter.\r\n     *\r\n     * This is only useful when a custom random number generator is required; the default implementation is fine in most circumstances.\r\n     * @function setRandom\r\n     * @param {function} generator A function that takes a max value and returns a random number between 0 and max - 1.\r\n     * @returns A random number between 0 and max - 1\r\n     */\r\n    function setRandom(generator) {\r\n        random = generator;\r\n    }\r\n    StateJS.setRandom = setRandom;\r\n    /**\r\n     * Returns the current method used to select an integer random number less than the max value passed as a parameter.\r\n     *\r\n     * This is only useful when a custom random number generator is required; the default implementation is fine in most circumstances.\r\n     * @function getRandom\r\n     * @returns {function} The function that takes a max value and returns a random number between 0 and max - 1.\r\n     */\r\n    function getRandom() {\r\n        return random;\r\n    }\r\n    StateJS.getRandom = getRandom;\r\n    // the default method used to produce a random number; defaulting to simplified implementation seen in Mozilla Math.random() page; may be overriden for testing\r\n    var random = function (max) {\r\n        return Math.floor(Math.random() * max);\r\n    };\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * Determines if an element is currently active; that it has been entered but not yet exited.\r\n     * @function isActive\r\n     * @param {Element} element The state to test.\r\n     * @param {IActiveStateConfiguration} instance The instance of the state machine model.\r\n     * @returns {boolean} True if the element is active.\r\n     */\r\n    function isActive(element, stateMachineInstance) {\r\n        if (element instanceof StateJS.Region) {\r\n            return isActive(element.state, stateMachineInstance);\r\n        }\r\n        else if (element instanceof StateJS.State) {\r\n            return element.region ? (isActive(element.region, stateMachineInstance) && (stateMachineInstance.getCurrent(element.region) === element)) : true;\r\n        }\r\n    }\r\n    StateJS.isActive = isActive;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * Tests an element within a state machine instance to see if its lifecycle is complete.\r\n     * @function isComplete\r\n     * @param {Element} element The element to test.\r\n     * @param {IActiveStateConfiguration} instance The instance of the state machine model to test for completeness.\r\n     * @returns {boolean} True if the element is complete.\r\n     */\r\n    function isComplete(element, instance) {\r\n        if (element instanceof StateJS.Region) {\r\n            return instance.getCurrent(element).isFinal();\r\n        }\r\n        else if (element instanceof StateJS.State) {\r\n            return element.regions.every(function (region) { return isComplete(region, instance); });\r\n        }\r\n        return true;\r\n    }\r\n    StateJS.isComplete = isComplete;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * Initialises a state machine and/or state machine model.\r\n     *\r\n     * Passing just the state machine model will initialise the model, passing the model and instance will initialse the instance and if necessary, the model.\r\n     * @function initialise\r\n     * @param {StateMachine} stateMachineModel The state machine model. If autoInitialiseModel is true (or no instance is specified) and the model has changed, the model will be initialised.\r\n     * @param {IActiveStateConfiguration} stateMachineInstance The optional state machine instance to initialise.\r\n     * @param {boolean} autoInitialiseModel Defaulting to true, this will cause the model to be initialised prior to initialising the instance if the model has changed.\r\n     */\r\n    function initialise(stateMachineModel, stateMachineInstance, autoInitialiseModel) {\r\n        if (autoInitialiseModel === void 0) { autoInitialiseModel = true; }\r\n        if (stateMachineInstance) {\r\n            // initialise the state machine model if necessary\r\n            if (autoInitialiseModel && stateMachineModel.clean === false) {\r\n                initialise(stateMachineModel);\r\n            }\r\n            // log as required\r\n            StateJS.console.log(\"initialise \" + stateMachineInstance);\r\n            // enter the state machine instance for the first time\r\n            stateMachineModel.onInitialise.invoke(undefined, stateMachineInstance);\r\n        }\r\n        else {\r\n            // log as required\r\n            StateJS.console.log(\"initialise \" + stateMachineModel.name);\r\n            // initialise the state machine model\r\n            stateMachineModel.accept(new InitialiseElements(), false);\r\n            stateMachineModel.clean = true;\r\n        }\r\n    }\r\n    StateJS.initialise = initialise;\r\n    /**\r\n     * Passes a message to a state machine for evaluation; messages trigger state transitions.\r\n     * @function evaluate\r\n     * @param {StateMachine} stateMachineModel The state machine model. If autoInitialiseModel is true (or no instance is specified) and the model has changed, the model will be initialised.\r\n     * @param {IActiveStateConfiguration} stateMachineInstance The instance of the state machine model to evaluate the message against.\r\n     * @param {boolean} autoInitialiseModel Defaulting to true, this will cause the model to be initialised prior to initialising the instance if the model has changed.\r\n     * @returns {boolean} True if the message triggered a state transition.\r\n     */\r\n    function evaluate(stateMachineModel, stateMachineInstance, message, autoInitialiseModel) {\r\n        if (autoInitialiseModel === void 0) { autoInitialiseModel = true; }\r\n        // log as required\r\n        StateJS.console.log(stateMachineInstance + \" evaluate \" + message);\r\n        // initialise the state machine model if necessary\r\n        if (autoInitialiseModel && stateMachineModel.clean === false) {\r\n            initialise(stateMachineModel);\r\n        }\r\n        // terminated state machine instances will not evaluate messages\r\n        if (stateMachineInstance.isTerminated) {\r\n            return false;\r\n        }\r\n        return evaluateState(stateMachineModel, stateMachineInstance, message);\r\n    }\r\n    StateJS.evaluate = evaluate;\r\n    // evaluates messages against a state, executing transitions as appropriate\r\n    function evaluateState(state, stateMachineInstance, message) {\r\n        var result = false;\r\n        // delegate to child regions first\r\n        state.regions.every(function (region) {\r\n            if (evaluateState(stateMachineInstance.getCurrent(region), stateMachineInstance, message)) {\r\n                result = true;\r\n                return StateJS.isActive(state, stateMachineInstance); // NOTE: this just controls the every loop; also isActive is a litte costly so using sparingly\r\n            }\r\n            return true; // NOTE: this just controls the every loop\r\n        });\r\n        // if a transition occured in a child region, check for completions\r\n        if (result) {\r\n            if ((message !== state) && StateJS.isComplete(state, stateMachineInstance)) {\r\n                evaluateState(state, stateMachineInstance, state);\r\n            }\r\n        }\r\n        else {\r\n            // otherwise look for a transition from this state\r\n            var transitions = state.outgoing.filter(function (transition) { return transition.guard(message, stateMachineInstance); });\r\n            if (transitions.length === 1) {\r\n                // execute if a single transition was found\r\n                result = traverse(transitions[0], stateMachineInstance, message);\r\n            }\r\n            else if (transitions.length > 1) {\r\n                // error if multiple transitions evaluated true\r\n                StateJS.console.error(state + \": multiple outbound transitions evaluated true for message \" + message);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // traverses a transition\r\n    function traverse(transition, instance, message) {\r\n        var onTraverse = new StateJS.Behavior(transition.onTraverse), target = transition.target;\r\n        // process static conditional branches\r\n        while (target && target instanceof StateJS.PseudoState && target.kind === StateJS.PseudoStateKind.Junction) {\r\n            target = (transition = selectTransition(target, instance, message)).target;\r\n            // concatenate behaviour before and after junctions\r\n            onTraverse.push(transition.onTraverse);\r\n        }\r\n        // execute the transition behaviour\r\n        onTraverse.invoke(message, instance);\r\n        // process dynamic conditional branches\r\n        if (target && (target instanceof StateJS.PseudoState) && (target.kind === StateJS.PseudoStateKind.Choice)) {\r\n            traverse(selectTransition(target, instance, message), instance, message);\r\n        }\r\n        else if (target && target instanceof StateJS.State && StateJS.isComplete(target, instance)) {\r\n            // test for completion transitions\r\n            evaluateState(target, instance, target);\r\n        }\r\n        return true;\r\n    }\r\n    // select next leg of composite transitions after choice and junction pseudo states\r\n    function selectTransition(pseudoState, stateMachineInstance, message) {\r\n        var results = pseudoState.outgoing.filter(function (transition) { return transition.guard(message, stateMachineInstance); });\r\n        if (pseudoState.kind === StateJS.PseudoStateKind.Choice) {\r\n            return results.length !== 0 ? results[StateJS.getRandom()(results.length)] : findElse(pseudoState);\r\n        }\r\n        else {\r\n            if (results.length > 1) {\r\n                StateJS.console.error(\"Multiple outbound transition guards returned true at \" + this + \" for \" + message);\r\n            }\r\n            else {\r\n                return results[0] || findElse(pseudoState);\r\n            }\r\n        }\r\n    }\r\n    // look for else transitins from a junction or choice\r\n    function findElse(pseudoState) {\r\n        return pseudoState.outgoing.filter(function (transition) { return transition.guard === StateJS.Transition.FalseGuard; })[0];\r\n    }\r\n    // functions to retreive specif element behavior\r\n    function leave(elementBehavior) { return elementBehavior[0] || (elementBehavior[0] = new StateJS.Behavior()); }\r\n    function beginEnter(elementBehavior) { return elementBehavior[1] || (elementBehavior[1] = new StateJS.Behavior()); }\r\n    function endEnter(elementBehavior) { return elementBehavior[2] || (elementBehavior[2] = new StateJS.Behavior()); }\r\n    function enter(elementBehavior) { return new StateJS.Behavior(beginEnter(elementBehavior)).push(endEnter(elementBehavior)); }\r\n    // get all the vertex ancestors of a vertex (including the vertex itself)\r\n    function ancestors(vertex) {\r\n        return (vertex.region ? ancestors(vertex.region.state) : []).concat(vertex);\r\n    }\r\n    // determine the type of transition and use the appropriate initiliasition method\r\n    var InitialiseTransitions = (function (_super) {\r\n        __extends(InitialiseTransitions, _super);\r\n        function InitialiseTransitions() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        InitialiseTransitions.prototype.visitTransition = function (transition, behaviour) {\r\n            if (transition.kind === StateJS.TransitionKind.Internal) {\r\n                transition.onTraverse.push(transition.transitionBehavior);\r\n            }\r\n            else if (transition.kind === StateJS.TransitionKind.Local) {\r\n                this.visitLocalTransition(transition, behaviour);\r\n            }\r\n            else {\r\n                this.visitExternalTransition(transition, behaviour);\r\n            }\r\n        };\r\n        // initialise internal transitions: these do not leave the source state\r\n        InitialiseTransitions.prototype.visitLocalTransition = function (transition, behaviour) {\r\n            var _this = this;\r\n            transition.onTraverse.push(function (message, instance) {\r\n                var targetAncestors = ancestors(transition.target), i = 0;\r\n                // find the first inactive element in the target ancestry\r\n                while (StateJS.isActive(targetAncestors[i], instance)) {\r\n                    ++i;\r\n                }\r\n                // exit the active sibling\r\n                leave(behaviour(instance.getCurrent(targetAncestors[i].region))).invoke(message, instance);\r\n                // perform the transition action;\r\n                transition.transitionBehavior.invoke(message, instance);\r\n                // enter the target ancestry\r\n                while (i < targetAncestors.length) {\r\n                    _this.cascadeElementEntry(transition, behaviour, targetAncestors[i++], targetAncestors[i], function (behavior) { behavior.invoke(message, instance); });\r\n                }\r\n                // trigger cascade\r\n                endEnter(behaviour(transition.target)).invoke(message, instance);\r\n            });\r\n        };\r\n        // initialise external transitions: these are abritarily complex\r\n        InitialiseTransitions.prototype.visitExternalTransition = function (transition, behaviour) {\r\n            var sourceAncestors = ancestors(transition.source), targetAncestors = ancestors(transition.target), i = Math.min(sourceAncestors.length, targetAncestors.length) - 1;\r\n            // find the index of the first uncommon ancestor (or for external transitions, the source)\r\n            while (sourceAncestors[i - 1] !== targetAncestors[i - 1]) {\r\n                --i;\r\n            }\r\n            // leave source ancestry as required\r\n            transition.onTraverse.push(leave(behaviour(sourceAncestors[i])));\r\n            // perform the transition effect\r\n            transition.onTraverse.push(transition.transitionBehavior);\r\n            // enter the target ancestry\r\n            while (i < targetAncestors.length) {\r\n                this.cascadeElementEntry(transition, behaviour, targetAncestors[i++], targetAncestors[i], function (behavior) { return transition.onTraverse.push(behavior); });\r\n            }\r\n            // trigger cascade\r\n            transition.onTraverse.push(endEnter(behaviour(transition.target)));\r\n        };\r\n        InitialiseTransitions.prototype.cascadeElementEntry = function (transition, behaviour, element, next, task) {\r\n            task(beginEnter(behaviour(element)));\r\n            if (next && element instanceof StateJS.State) {\r\n                element.regions.forEach(function (region) {\r\n                    task(beginEnter(behaviour(region)));\r\n                    if (region !== next.region) {\r\n                        task(endEnter(behaviour(region)));\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        return InitialiseTransitions;\r\n    })(StateJS.Visitor);\r\n    // bootstraps all the elements within a state machine model\r\n    var InitialiseElements = (function (_super) {\r\n        __extends(InitialiseElements, _super);\r\n        function InitialiseElements() {\r\n            _super.apply(this, arguments);\r\n            this.behaviours = {};\r\n        }\r\n        InitialiseElements.prototype.behaviour = function (element) {\r\n            return this.behaviours[element.qualifiedName] || (this.behaviours[element.qualifiedName] = []);\r\n        };\r\n        InitialiseElements.prototype.visitElement = function (element, deepHistoryAbove) {\r\n            if (StateJS.console !== defaultConsole) {\r\n                leave(this.behaviour(element)).push(function (message, instance) { return StateJS.console.log(instance + \" leave \" + element); });\r\n                beginEnter(this.behaviour(element)).push(function (message, instance) { return StateJS.console.log(instance + \" enter \" + element); });\r\n            }\r\n        };\r\n        InitialiseElements.prototype.visitRegion = function (region, deepHistoryAbove) {\r\n            var _this = this;\r\n            var regionInitial = region.vertices.reduce(function (result, vertex) { return vertex instanceof StateJS.PseudoState && vertex.isInitial() ? vertex : result; }, undefined);\r\n            region.vertices.forEach(function (vertex) { vertex.accept(_this, deepHistoryAbove || (regionInitial && regionInitial.kind === StateJS.PseudoStateKind.DeepHistory)); });\r\n            // leave the curent active child state when exiting the region\r\n            leave(this.behaviour(region)).push(function (message, stateMachineInstance) { return leave(_this.behaviour(stateMachineInstance.getCurrent(region))).invoke(message, stateMachineInstance); });\r\n            // enter the appropriate child vertex when entering the region\r\n            if (deepHistoryAbove || !regionInitial || regionInitial.isHistory()) {\r\n                endEnter(this.behaviour(region)).push(function (message, stateMachineInstance, history) {\r\n                    enter(_this.behaviour((history || regionInitial.isHistory()) ? stateMachineInstance.getCurrent(region) || regionInitial : regionInitial)).invoke(message, stateMachineInstance, history || regionInitial.kind === StateJS.PseudoStateKind.DeepHistory);\r\n                });\r\n            }\r\n            else {\r\n                endEnter(this.behaviour(region)).push(enter(this.behaviour(regionInitial)));\r\n            }\r\n            this.visitElement(region, deepHistoryAbove);\r\n        };\r\n        InitialiseElements.prototype.visitPseudoState = function (pseudoState, deepHistoryAbove) {\r\n            _super.prototype.visitPseudoState.call(this, pseudoState, deepHistoryAbove);\r\n            // evaluate comppletion transitions once vertex entry is complete\r\n            if (pseudoState.isInitial()) {\r\n                endEnter(this.behaviour(pseudoState)).push(function (message, stateMachineInstance) { return traverse(pseudoState.outgoing[0], stateMachineInstance); });\r\n            }\r\n            else if (pseudoState.kind === StateJS.PseudoStateKind.Terminate) {\r\n                // terminate the state machine instance upon transition to a terminate pseudo state\r\n                beginEnter(this.behaviour(pseudoState)).push(function (message, stateMachineInstance) { return stateMachineInstance.isTerminated = true; });\r\n            }\r\n        };\r\n        InitialiseElements.prototype.visitState = function (state, deepHistoryAbove) {\r\n            var _this = this;\r\n            // NOTE: manually iterate over the child regions to control the sequence of behaviour\r\n            state.regions.forEach(function (region) {\r\n                region.accept(_this, deepHistoryAbove);\r\n                leave(_this.behaviour(state)).push(leave(_this.behaviour(region)));\r\n                endEnter(_this.behaviour(state)).push(enter(_this.behaviour(region)));\r\n            });\r\n            this.visitVertex(state, deepHistoryAbove);\r\n            // add the user defined behaviour when entering and exiting states\r\n            leave(this.behaviour(state)).push(state.exitBehavior);\r\n            beginEnter(this.behaviour(state)).push(state.entryBehavior);\r\n            // update the parent regions current state\r\n            beginEnter(this.behaviour(state)).push(function (message, stateMachineInstance) {\r\n                if (state.region) {\r\n                    stateMachineInstance.setCurrent(state.region, state);\r\n                }\r\n            });\r\n        };\r\n        InitialiseElements.prototype.visitStateMachine = function (stateMachine, deepHistoryAbove) {\r\n            var _this = this;\r\n            _super.prototype.visitStateMachine.call(this, stateMachine, deepHistoryAbove);\r\n            // initiaise all the transitions once all the elements have been initialised\r\n            stateMachine.accept(new InitialiseTransitions(), function (element) { return _this.behaviour(element); });\r\n            // define the behaviour for initialising a state machine instance\r\n            stateMachine.onInitialise = enter(this.behaviour(stateMachine));\r\n        };\r\n        return InitialiseElements;\r\n    })(StateJS.Visitor);\r\n    var defaultConsole = {\r\n        log: function (message) {\r\n            var optionalParams = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                optionalParams[_i - 1] = arguments[_i];\r\n            }\r\n        },\r\n        warn: function (message) {\r\n            var optionalParams = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                optionalParams[_i - 1] = arguments[_i];\r\n            }\r\n        },\r\n        error: function (message) {\r\n            var optionalParams = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                optionalParams[_i - 1] = arguments[_i];\r\n            }\r\n            throw message;\r\n        }\r\n    };\r\n    /**\r\n     * The object used for log, warning and error messages\r\n     * @member {IConsole}\r\n     */\r\n    StateJS.console = defaultConsole;\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\nvar StateJS;\r\n(function (StateJS) {\r\n    /**\r\n     * Validates a state machine model for correctness (see the constraints defined within the UML Superstructure specification).\r\n     * @function validate\r\n     * @param {StateMachine} stateMachineModel The state machine model to validate.\r\n     */\r\n    function validate(stateMachineModel) {\r\n        stateMachineModel.accept(new Validator());\r\n    }\r\n    StateJS.validate = validate;\r\n    function ancestors(vertex) {\r\n        return (vertex.region ? ancestors(vertex.region.state) : []).concat(vertex);\r\n    }\r\n    var Validator = (function (_super) {\r\n        __extends(Validator, _super);\r\n        function Validator() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        Validator.prototype.visitPseudoState = function (pseudoState) {\r\n            _super.prototype.visitPseudoState.call(this, pseudoState);\r\n            if (pseudoState.kind === StateJS.PseudoStateKind.Choice || pseudoState.kind === StateJS.PseudoStateKind.Junction) {\r\n                // [7] In a complete statemachine, a junction vertex must have at least one incoming and one outgoing transition.\r\n                // [8] In a complete statemachine, a choice vertex must have at least one incoming and one outgoing transition.\r\n                if (pseudoState.outgoing.length === 0) {\r\n                    StateJS.console.error(pseudoState + \": \" + pseudoState.kind + \" pseudo states must have at least one outgoing transition.\");\r\n                }\r\n                // choice and junction pseudo state can have at most one else transition\r\n                if (pseudoState.outgoing.filter(function (transition) { return transition.guard === StateJS.Transition.FalseGuard; }).length > 1) {\r\n                    StateJS.console.error(pseudoState + \": \" + pseudoState.kind + \" pseudo states cannot have more than one Else transitions.\");\r\n                }\r\n            }\r\n            else {\r\n                // non choice/junction pseudo state may not have else transitions\r\n                if (pseudoState.outgoing.filter(function (transition) { return transition.guard === StateJS.Transition.FalseGuard; }).length !== 0) {\r\n                    StateJS.console.error(pseudoState + \": \" + pseudoState.kind + \" pseudo states cannot have Else transitions.\");\r\n                }\r\n                if (pseudoState.isInitial()) {\r\n                    if (pseudoState.outgoing.length !== 1) {\r\n                        // [1] An initial vertex can have at most one outgoing transition.\r\n                        // [2] History vertices can have at most one outgoing transition.\r\n                        StateJS.console.error(pseudoState + \": initial pseudo states must have one outgoing transition.\");\r\n                    }\r\n                    else {\r\n                        // [9] The outgoing transition from an initial vertex may have a behavior, but not a trigger or guard.\r\n                        if (pseudoState.outgoing[0].guard !== StateJS.Transition.TrueGuard) {\r\n                            StateJS.console.error(pseudoState + \": initial pseudo states cannot have a guard condition.\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        Validator.prototype.visitRegion = function (region) {\r\n            _super.prototype.visitRegion.call(this, region);\r\n            // [1] A region can have at most one initial vertex.\r\n            // [2] A region can have at most one deep history vertex.\r\n            // [3] A region can have at most one shallow history vertex.\r\n            var initial;\r\n            region.vertices.forEach(function (vertex) {\r\n                if (vertex instanceof StateJS.PseudoState && vertex.isInitial()) {\r\n                    if (initial) {\r\n                        StateJS.console.error(region + \": regions may have at most one initial pseudo state.\");\r\n                    }\r\n                    initial = vertex;\r\n                }\r\n            });\r\n        };\r\n        Validator.prototype.visitState = function (state) {\r\n            _super.prototype.visitState.call(this, state);\r\n            if (state.regions.filter(function (state) { return state.name === StateJS.Region.defaultName; }).length > 1) {\r\n                StateJS.console.error(state + \": a state cannot have more than one region named \" + StateJS.Region.defaultName);\r\n            }\r\n        };\r\n        Validator.prototype.visitFinalState = function (finalState) {\r\n            _super.prototype.visitFinalState.call(this, finalState);\r\n            // [1] A final state cannot have any outgoing transitions.\r\n            if (finalState.outgoing.length !== 0) {\r\n                StateJS.console.error(finalState + \": final states must not have outgoing transitions.\");\r\n            }\r\n            // [2] A final state cannot have regions.\r\n            if (finalState.regions.length !== 0) {\r\n                StateJS.console.error(finalState + \": final states must not have child regions.\");\r\n            }\r\n            // [4] A final state has no entry behavior.\r\n            if (finalState.entryBehavior.hasActions()) {\r\n                StateJS.console.warn(finalState + \": final states may not have entry behavior.\");\r\n            }\r\n            // [5] A final state has no exit behavior.\r\n            if (finalState.exitBehavior.hasActions()) {\r\n                StateJS.console.warn(finalState + \": final states may not have exit behavior.\");\r\n            }\r\n        };\r\n        Validator.prototype.visitTransition = function (transition) {\r\n            _super.prototype.visitTransition.call(this, transition);\r\n            // Local transition target vertices must be a child of the source vertex\r\n            if (transition.kind === StateJS.TransitionKind.Local) {\r\n                if (ancestors(transition.target).indexOf(transition.source) === -1) {\r\n                    StateJS.console.error(transition + \": local transition target vertices must be a child of the source composite sate.\");\r\n                }\r\n            }\r\n        };\r\n        return Validator;\r\n    })(StateJS.Visitor);\r\n})(StateJS || (StateJS = {}));\r\n/*\r\n * Finite state machine library\r\n * Copyright (c) 2014-5 Steelbreeze Limited\r\n * Licensed under the MIT and GPL v3 licences\r\n * http://www.steelbreeze.net/state.cs\r\n */\r\n//var module = module;\r\nmodule.exports = StateJS;\r\n"
  ]
}